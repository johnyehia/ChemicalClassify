/*
@author John Yehia
@since 11-14-2022
@version 1.0

Description:
This program is supposed to read data from the 5 arrays presented from the PerodicTable.txt file.
Using the element group, atomic number, name to determine whether it is an alkaline, alkali, or noble gas.
This program also checks whether the data presented in the input file is valid or not. The number of the periodic
table range from 1-118. This program also checks whether the atomic number is classified based on the PerodicTable.txt file.

I used while loops, if statements, and methods to program this assignment. If statements were extremely essential in the
development of this program. I called methods such as classify, which classifies the data using the PerodicTable.txt file.
In addition, methods such as readName, checkNumber, isNobleGas, isAlkaliMetal, is AlkalineMetal and more were used.
Every single piece of code in this program was essential, as this program contains many nuances.

I found this program to be moderately difficult. I believe difficulty is what causes one to learn, and I sure did.
I learned about concepts such as variable scope, calling methods effectively, and creating programs with more than
one hundred lines of logic. I felt like I built something that was impactful, and I plan on building upon this program.
I appreciate the learning experience presented to me and I wouldn't trade it for a simple programming assignment.
 */
import java.io.File;
import java.io.PrintStream;
import java.util.Scanner;

public class ChemicalClassify {
    /*here in this program, the main method references the input data and prints said data
        to an output file
        the main method has to throw an exception, because I created a new input stream
        */
    static PrintStream ps;

    public static void main(String[] args) throws Exception {
        ps = new PrintStream("/Users/johnyehia/Desktop/output0.txt");
        //we set these variables to default values
        int total = 0;
        int number = 0;
        int errors = 0;

        Scanner scanner = new Scanner(new File("/Users/johnyehia/Desktop/input0.txt"));
        while (scanner.hasNext()) {
            number = scanner.nextInt();
            if (checkNumber(number)) {
                classify(number);
            } else {
                ps.printf("%nERROR: Atomic Number: %d is invalid.%n", number);
                //this here will add one to the errors variable.
                errors++;
            }
            //this here will add one to the total variable.
            total++;
        }

        ps.println("Total data in input: " + total);
        ps.println("Number of correct values in input: " + (total - errors));
        ps.println("Number of errors in input: " + errors);
        ps.close();
        scanner.close();
    }

    //this method makes sure the number in the input file is a valid atomic number
    public static boolean checkNumber(int atomicNumber) {
        //if the atomic number is between 1 and 118, it is indeed on the periodic table.
        if (atomicNumber >= 1 && atomicNumber <= 118) {
            return true;
            //if not between 1 & 118, it is not on the periodic table.
        } else {
            return false;
        }
    }

    //this method is being passed the atomic number to return the name
    //this method must throw an exception because a new input stream is being created
    public static String readName(int atomicNumber) throws Exception {
        Scanner scanner = new Scanner(new File("/Users/johnyehia/Desktop/PeriodicTable0.txt"));

        while (scanner.hasNext()) {
            int number = scanner.nextInt();
            String name = scanner.next();

            if (number == atomicNumber) {
                scanner.close();
                return name;
            }
        }
        scanner.close();
        return "Not found";
    }

    public static int readAtomicWeight(int atomicNumber) throws Exception {
        Scanner scanner = new Scanner(new File("/Users/johnyehia/Desktop/PeriodicTable0.txt"));

        while (scanner.hasNext()) {
            int number = scanner.nextInt();
            int mass = scanner.nextInt();

            if (atomicNumber == number) {
                scanner.close();
                return mass;
            }
        }
        scanner.close();
        return 0;
    }

    //this method receives an atomicNumber and returns the corresponding atomic weight.
    public static int readGroup(int atomicNumber) throws Exception {
        Scanner scanner = new Scanner(new File("/Users/johnyehia/Desktop/PeriodicTable0.txt"));

        while (scanner.hasNext()) {
            int number = scanner.nextInt();
            int group = scanner.nextInt();

            if (atomicNumber == number) {
                scanner.close();
                return group;
            }
        }
        scanner.close();
        return 0;
    }

    //this method receives an element's name and print the name of the element with a heading
    public static void printName(String name) {
        ps.println("Name " + name);
    }

    /*this method receives the element's group, which is an int, and returns true if it is a noble gas,
    or false if not. Elements in group 18 are considered noble gases.
       */
    public static boolean isNobleGas(int group) {
        //if element group is 18, it is a noble gas
        if (group == 18) {
            return true;
        } else {
            //if group isn't 18, it is not a noble gas
            return false;
        }


    }
    /*this method receives the element's group, an integer, and returns true if the element is an
        alkali metal. If not, it returns false. Alkali metals are elements in group 1.
         */

    public static boolean isAlkaliMetal(int group) {
        if (group == 1) {
            return true;
        } else {
            return false;
        }
    }

    /*
    this method receives the element group, an int, and returns true if it is an alkaline earth metal.
    Returns false if not.
     */
    public static boolean isAlkaline(int group) {
        if (group == 2) {
            return true;
        } else {
            return false;
        }
    }

    /*this method receives an atomic number.
    Then calls methods readName, readGroup, & readAtomicWeight.
    This essentially classifies the elements.
     */
    public static void classify(int atomicNumber) throws Exception {
        //this will print the atomic number if valid.
        ps.println("Atomic Number: " + atomicNumber + " is valid.");
        String name = readName(atomicNumber);
        //if readName method returns "Not Found", we will print NOT FOUND IN TABLE
        if ("Not found".equals(name)) {
            ps.printf("%n%d NOT FOUND IN TABLE %n", atomicNumber);
        } else {
            //here we call the readGroup method and pass the atomic number as a check.
            int group = readGroup(atomicNumber);
            //here we call the readAtomicWeight method and pass the atomic number as a check.
            int mass = readAtomicWeight(atomicNumber);
            //pretty self-explanatory. Neutrons are atomic mass minus number.
            int neutrons = mass - atomicNumber;
            //we call the printName method and pass in the name.
            printName(name);
            //here we do some basic printing to the printstream.
            ps.println("Atomic Weight: " + mass);
            ps.println("Group: " + group);

            //here is an if statement using our element groups to determine the chemical property category.
            if (isAlkaliMetal(group)) {
                ps.println("Alkali Metal");
            } else if (isAlkaline(group)) {
                ps.println("Alkaline Metal");
            } else if (isNobleGas(group)) {
                ps.println("Noble Gas");
            } else {
                //if the chemical type isn't on the periodic table text file, we shall print, "Not classified yet."
                ps.println("Not classified yet.");
            }
            //here we use a printf to beautifully format the amount of neutrons, electrons, and protons we have.
            ps.printf("%nProtons: %d    Neutrons: %d    Electrons: %d%n   ", atomicNumber, neutrons, atomicNumber);
        }
    }
}
